generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  username   String      @unique
  name       String?
  password   String
  createdAt  DateTime    @default(now())
  isActive   Boolean     @default(true)
  bio        String?
  comments   Comment[]
  following  Follow[]    @relation("Following")
  followers  Follow[]    @relation("Followers")
  likes      Like[]
  poems      Poem[]
  savedPoems SavedPoem[]
}

model Poem {
  id         String         @id @default(uuid())
  title      String
  content    String
  authorId   String
  createdAt  DateTime       @default(now())
  comments   Comment[] 
  likes      Like[]    
  author     User           @relation(fields: [authorId], references: [id])
  savedBy    SavedPoem[]
  categories PoemCategory[] @relation("PoemToPoemCategory")
  tags       PoemTag[]      @relation("PoemToPoemTag")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  poemId    String
  createdAt DateTime @default(now())
  poem      Poem     @relation(fields: [poemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, poemId])
}

model SavedPoem {
  id        String   @id @default(uuid())
  userId    String
  poemId    String
  createdAt DateTime @default(now())
  poem      Poem     @relation(fields: [poemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, poemId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  poemId    String
  createdAt DateTime @default(now())
  poem      Poem     @relation(fields: [poemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PoemCategory {
  id    String @id @default(uuid())
  name  String @unique
  poems Poem[] @relation("PoemToPoemCategory")
}

model PoemTag {
  id    String @id @default(uuid())
  name  String @unique
  poems Poem[] @relation("PoemToPoemTag")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
